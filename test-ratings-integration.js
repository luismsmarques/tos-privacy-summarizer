#!/usr/bin/env node

// Script para testar a integra√ß√£o completa do sistema de ratings
// Usando fetch nativo do Node.js (dispon√≠vel a partir da v18)

const BACKEND_URL = 'https://tos-privacy-summarizer.vercel.app';

// Texto de teste para an√°lise
const testText = `
Pol√≠tica de Privacidade

Esta pol√≠tica descreve como coletamos, usamos e compartilhamos suas informa√ß√µes pessoais.

1. Informa√ß√µes que Coletamos
Coletamos informa√ß√µes que voc√™ nos fornece diretamente, como nome, endere√ßo de email e informa√ß√µes de pagamento. Tamb√©m coletamos informa√ß√µes automaticamente quando voc√™ usa nossos servi√ßos, incluindo dados de uso, cookies e informa√ß√µes do dispositivo.

2. Como Usamos Suas Informa√ß√µes
Usamos suas informa√ß√µes para fornecer, manter e melhorar nossos servi√ßos, processar transa√ß√µes, enviar comunica√ß√µes t√©cnicas e administrativas, e personalizar sua experi√™ncia.

3. Compartilhamento de Informa√ß√µes
Podemos compartilhar suas informa√ß√µes com terceiros para fins de marketing, an√°lise de dados e publicidade direcionada. Tamb√©m compartilhamos informa√ß√µes quando necess√°rio para cumprir obriga√ß√µes legais ou proteger nossos direitos.

4. Seguran√ßa dos Dados
Implementamos medidas de seguran√ßa t√©cnicas e organizacionais para proteger suas informa√ß√µes contra acesso n√£o autorizado, altera√ß√£o, divulga√ß√£o ou destrui√ß√£o.

5. Seus Direitos
Voc√™ tem o direito de acessar, corrigir ou excluir suas informa√ß√µes pessoais. Voc√™ tamb√©m pode optar por n√£o receber comunica√ß√µes de marketing.

6. Altera√ß√µes nesta Pol√≠tica
Podemos atualizar esta pol√≠tica periodicamente. As altera√ß√µes entrar√£o em vigor imediatamente ap√≥s a publica√ß√£o.

7. Jurisdi√ß√£o
Esta pol√≠tica √© regida pelas leis do Brasil e qualquer disputa ser√° resolvida atrav√©s de arbitragem vinculativa.
`;

async function testRatingsIntegration() {
    console.log('üß™ Testando integra√ß√£o completa do sistema de ratings...\n');
    
    try {
        // 1. Testar cria√ß√£o de usu√°rio
        console.log('1Ô∏è‚É£ Criando usu√°rio de teste...');
        const userResponse = await fetch(`${BACKEND_URL}/api/users/create`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                deviceId: `test_device_${Date.now()}`
            })
        });
        
        if (!userResponse.ok) {
            throw new Error(`Erro ao criar usu√°rio: ${userResponse.status}`);
        }
        
        const userData = await userResponse.json();
        const userId = userData.userId;
        console.log(`‚úÖ Usu√°rio criado: ${userId}\n`);
        
        // 2. Testar an√°lise com ratings
        console.log('2Ô∏è‚É£ Testando an√°lise com sistema de ratings...');
        const analysisResponse = await fetch(`${BACKEND_URL}/api/gemini/proxy`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: userId,
                text: testText,
                focus: 'privacy',
                apiType: 'shared',
                url: 'https://test.com/privacy',
                title: 'Pol√≠tica de Privacidade - Teste'
            })
        });
        
        if (!analysisResponse.ok) {
            const errorText = await analysisResponse.text();
            throw new Error(`Erro na an√°lise: ${analysisResponse.status} - ${errorText}`);
        }
        
        const analysisData = await analysisResponse.json();
        console.log('‚úÖ An√°lise conclu√≠da com sucesso!');
        
        // 3. Verificar estrutura da resposta
        console.log('\n3Ô∏è‚É£ Verificando estrutura da resposta...');
        console.log('üìä Resposta recebida:', {
            hasSummary: !!analysisData.summary,
            hasRatings: !!analysisData.ratings,
            hasCredits: analysisData.credits !== undefined,
            hasApiType: !!analysisData.apiType,
            hasDocumentType: !!analysisData.documentType
        });
        
        // 4. Verificar ratings
        if (analysisData.ratings) {
            console.log('\n4Ô∏è‚É£ Verificando ratings calculados...');
            const ratings = analysisData.ratings;
            console.log('üìà Ratings:', {
                complexidade: ratings.complexidade,
                boas_praticas: ratings.boas_praticas,
                risk_score: ratings.risk_score
            });
            
            // Validar ranges
            const isValidComplexidade = ratings.complexidade >= 1 && ratings.complexidade <= 10;
            const isValidBoasPraticas = ratings.boas_praticas >= 1 && ratings.boas_praticas <= 10;
            const isValidRiskScore = ratings.risk_score >= 1 && ratings.risk_score <= 10;
            
            console.log('‚úÖ Valida√ß√£o dos ratings:', {
                complexidade_valid: isValidComplexidade,
                boas_praticas_valid: isValidBoasPraticas,
                risk_score_valid: isValidRiskScore
            });
            
            if (!isValidComplexidade || !isValidBoasPraticas || !isValidRiskScore) {
                throw new Error('Ratings fora do range esperado (1-10)');
            }
        } else {
            throw new Error('Ratings n√£o encontrados na resposta');
        }
        
        // 5. Verificar resumo
        if (analysisData.summary) {
            console.log('\n5Ô∏è‚É£ Verificando estrutura do resumo...');
            let summaryObj;
            try {
                summaryObj = JSON.parse(analysisData.summary);
            } catch (e) {
                console.log('‚ö†Ô∏è Resumo n√£o √© JSON v√°lido, usando como texto');
                summaryObj = { summary: analysisData.summary };
            }
            
            console.log('üìù Estrutura do resumo:', {
                hasResumoConciso: !!summaryObj.resumo_conciso,
                hasPontosChave: !!summaryObj.pontos_chave,
                hasAlertasPrivacidade: !!summaryObj.alertas_privacidade,
                pontosChaveCount: summaryObj.pontos_chave ? summaryObj.pontos_chave.length : 0,
                alertasCount: summaryObj.alertas_privacidade ? summaryObj.alertas_privacidade.length : 0
            });
        }
        
        // 6. Verificar documentType
        if (analysisData.documentType) {
            console.log('\n6Ô∏è‚É£ Verificando tipo de documento...');
            console.log('üìÑ Tipo detectado:', analysisData.documentType);
            
            const validTypes = ['privacy_policy', 'terms_of_service', 'unknown'];
            if (!validTypes.includes(analysisData.documentType)) {
                throw new Error(`Tipo de documento inv√°lido: ${analysisData.documentType}`);
            }
        }
        
        // 7. Testar hist√≥rico
        console.log('\n7Ô∏è‚É£ Testando hist√≥rico do usu√°rio...');
        const historyResponse = await fetch(`${BACKEND_URL}/api/analytics/user-history/${userId}?limit=1`);
        
        if (historyResponse.ok) {
            const historyData = await historyResponse.json();
            console.log('‚úÖ Hist√≥rico acess√≠vel:', {
                success: historyData.success,
                hasData: !!historyData.data,
                dataLength: historyData.data ? historyData.data.length : 0
            });
            
            if (historyData.data && historyData.data.length > 0) {
                const latestSummary = historyData.data[0];
                console.log('üìä √öltimo resumo no hist√≥rico:', {
                    hasRatings: !!(latestSummary.rating_complexidade || latestSummary.rating_boas_praticas || latestSummary.risk_score),
                    complexidade: latestSummary.rating_complexidade,
                    boas_praticas: latestSummary.rating_boas_praticas,
                    risk_score: latestSummary.risk_score
                });
            }
        } else {
            console.log('‚ö†Ô∏è Hist√≥rico n√£o acess√≠vel:', historyResponse.status);
        }
        
        console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('‚úÖ Sistema de ratings totalmente integrado e funcionando');
        
    } catch (error) {
        console.error('\n‚ùå ERRO NO TESTE:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

// Executar teste
testRatingsIntegration();

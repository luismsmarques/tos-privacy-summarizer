#!/usr/bin/env node

// Script para testar autentica√ß√£o do dashboard
const BACKEND_URL = 'https://tos-privacy-summarizer.vercel.app';

async function testDashboardAuth() {
    console.log('üîê Testando autentica√ß√£o do dashboard...\n');
    
    try {
        // 1. Testar acesso ao dashboard sem token
        console.log('1Ô∏è‚É£ Testando acesso sem token...');
        const dashboardResponse = await fetch(`${BACKEND_URL}/dashboard`);
        console.log('Status:', dashboardResponse.status);
        
        if (dashboardResponse.status === 401) {
            console.log('‚úÖ Dashboard protegido corretamente');
        } else {
            console.log('‚ö†Ô∏è Dashboard pode n√£o estar protegido');
        }
        
        // 2. Testar login com credenciais padr√£o
        console.log('\n2Ô∏è‚É£ Testando login com credenciais padr√£o...');
        const loginResponse = await fetch(`${BACKEND_URL}/api/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: 'admin',
                password: 'admin123'
            })
        });
        
        console.log('Status do login:', loginResponse.status);
        
        if (loginResponse.ok) {
            const loginData = await loginResponse.json();
            console.log('‚úÖ Login bem-sucedido!');
            console.log('Token recebido:', loginData.token ? 'Sim' : 'N√£o');
            
            // 3. Testar acesso ao dashboard com token
            console.log('\n3Ô∏è‚É£ Testando acesso ao dashboard com token...');
            const protectedResponse = await fetch(`${BACKEND_URL}/dashboard`, {
                headers: {
                    'Cookie': `adminToken=${loginData.token}`
                }
            });
            
            console.log('Status do dashboard protegido:', protectedResponse.status);
            
            if (protectedResponse.ok) {
                console.log('‚úÖ Dashboard acess√≠vel com token v√°lido');
            } else {
                console.log('‚ùå Dashboard ainda n√£o acess√≠vel com token');
            }
            
        } else {
            const errorData = await loginResponse.json();
            console.log('‚ùå Login falhou:', errorData.error);
        }
        
        // 4. Testar endpoint de analytics
        console.log('\n4Ô∏è‚É£ Testando endpoint de analytics...');
        const analyticsResponse = await fetch(`${BACKEND_URL}/api/analytics/overview`);
        console.log('Status do analytics:', analyticsResponse.status);
        
        if (analyticsResponse.ok) {
            console.log('‚úÖ Analytics acess√≠vel');
        } else {
            console.log('‚ùå Analytics n√£o acess√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
    }
}

// Executar teste
testDashboardAuth();

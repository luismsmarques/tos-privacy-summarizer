// Service Worker para comunica√ß√£o com API Gemini
// Suporte para API compartilhada (via backend seguro) e chaves pr√≥prias
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent';
const GEMINI_MODELS_URL = 'https://generativelanguage.googleapis.com/v1beta/models';

// URLs do backend seguro (substituir pela URL do seu servidor)
// const BACKEND_BASE_URL = 'http://localhost:3000'; // Para desenvolvimento local
const BACKEND_BASE_URL = 'https://tos-privacy-summarizer.vercel.app';

const API_ENDPOINTS = {
    PROXY: `${BACKEND_BASE_URL}/api/gemini/proxy`,
    CREDITS: `${BACKEND_BASE_URL}/api/credits`,
    USERS: `${BACKEND_BASE_URL}/api/users`,
    STRIPE: `${BACKEND_BASE_URL}/api/stripe`
};

// Sistema de logging melhorado
const Logger = {
    log: (message, data = null) => {
        console.log(`[ToS-Background] ${message}`, data || '');
    },
    error: (message, error = null) => {
        console.error(`[ToS-Background ERROR] ${message}`, error || '');
        if (error && error.stack) {
            console.error('Stack trace:', error.stack);
        }
    },
    warn: (message, data = null) => {
        console.warn(`[ToS-Background WARNING] ${message}`, data || '');
    }
};

// Sistema de retry para requisi√ß√µes
const RetryManager = {
    maxRetries: 3,
    baseDelay: 1000,
    
    async executeWithRetry(operation, context = '') {
        let lastError;
        
        for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
            try {
                Logger.log(`Tentativa ${attempt}/${this.maxRetries} ${context}`);
                return await operation();
            } catch (error) {
                lastError = error;
                Logger.warn(`Tentativa ${attempt} falhou ${context}:`, error.message);
                
                if (attempt < this.maxRetries) {
                    const delay = this.baseDelay * Math.pow(2, attempt - 1);
                    Logger.log(`Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        
        Logger.error(`Todas as tentativas falharam ${context}:`, lastError);
        throw lastError;
    }
};

// Listener para mensagens do content.js
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'summarizeText') {
    Logger.log('Recebido texto para resumir:', {
      textLength: request.text?.length || 0,
      url: request.url,
      title: request.title,
      language: request.language || 'pt'
    });

    // Processar de forma ass√≠ncrona mas sem usar sendResponse
    processSummaryAsync(request.text, request.url, request.title, request.language)
      .catch(error => {
        Logger.error('Erro no processamento ass√≠ncrono:', error);
        chrome.runtime.sendMessage({
          action: 'displaySummary',
          summary: `Erro interno: ${error.message}`
        });
      });
    
    // Responder imediatamente para evitar erro de canal fechado
    sendResponse({ status: 'processing' });
  }
});

// Fun√ß√£o ass√≠ncrona para processar o resumo
async function processSummaryAsync(text, url = '', title = '', language = 'pt') {
  try {
    Logger.log('Processando resumo...', { language });
    
    // Validar entrada
    if (!text || typeof text !== 'string') {
      throw new Error('Texto inv√°lido fornecido');
    }
    
    if (text.length < 50) {
      throw new Error('Texto muito curto para an√°lise (m√≠nimo 50 caracteres)');
    }
    
    // Enviar atualiza√ß√£o de progresso inicial
    chrome.runtime.sendMessage({
      action: 'progressUpdate',
      step: 1,
      text: 'Texto extra√≠do com sucesso',
      progress: 25
    });

    // Obter configura√ß√£o da API do storage
    const result = await new Promise((resolve) => {
      chrome.storage.local.get(['geminiApiKey', 'apiType', 'userId'], resolve);
    });

    // For√ßar uso da API compartilhada (backend seguro)
    let apiType = 'shared';
    let userId = result.userId;
    
    Logger.log('üîß Configura√ß√£o for√ßada para API compartilhada');

    // Se n√£o tem userId, criar um
    if (!userId) {
      userId = await createOrGetUserId();
    }

    // Enviar atualiza√ß√£o de progresso
    chrome.runtime.sendMessage({
      action: 'progressUpdate',
      step: 2,
      text: 'Enviando para an√°lise IA',
      progress: 50
    });

    let summary;
    
    if (apiType === 'shared') {
      // Usar backend seguro com retry
      summary = await RetryManager.executeWithRetry(
        () => summarizeWithBackend(text, userId, url, title, language),
        'summarizeWithBackend'
      );
    } else {
      // Usar chave pr√≥pria (m√©todo antigo)
      const apiKey = result.geminiApiKey;
      
      if (!apiKey || apiKey === 'SHARED_API') {
        throw new Error('Chave da API n√£o configurada. Por favor, configure a sua chave da API Gemini nas configura√ß√µes da extens√£o.');
      }
      
      summary = await RetryManager.executeWithRetry(
        () => summarizeWithGemini(text, apiKey, language),
        'summarizeWithGemini'
      );
    }
    
    Logger.log('Resumo gerado com sucesso');
    
    // Enviar atualiza√ß√£o de progresso final
    chrome.runtime.sendMessage({
      action: 'progressUpdate',
      step: 4,
      text: 'Processamento conclu√≠do',
      progress: 100
    });
    
    // Aguardar um pouco antes de mostrar o resultado
    setTimeout(() => {
      Logger.log('Enviando resumo para popup');
      chrome.runtime.sendMessage({
        action: 'displaySummary',
        summary: summary.summary || summary, // Compatibilidade com formato antigo
        ratings: summary.ratings,
        documentType: summary.documentType
      });
    }, 500);

  } catch (error) {
    Logger.error('Erro ao gerar resumo:', error);
    
    // Determinar tipo de erro e enviar mensagem apropriada
    let errorMessage = 'Erro ao gerar resumo: ';
    
    if (error.message.includes('API Gemini')) {
      if (error.message.includes('401') || error.message.includes('403')) {
        errorMessage += 'Chave da API inv√°lida ou sem permiss√µes';
      } else if (error.message.includes('429')) {
        errorMessage += 'Limite de uso da API atingido';
      } else {
        errorMessage += 'Erro na API Gemini';
      }
    } else if (error.message.includes('fetch') || error.message.includes('network')) {
      errorMessage += 'Erro de liga√ß√£o √† internet';
    } else if (error.message.includes('JSON')) {
      errorMessage += 'Erro ao processar resposta da API';
    } else if (error.message.includes('Cr√©ditos insuficientes')) {
      errorMessage += 'Cr√©ditos insuficientes. Compre mais cr√©ditos ou configure a sua pr√≥pria chave da API.';
    } else if (error.message.includes('HTTP')) {
      errorMessage += `Erro do servidor: ${error.message}`;
    } else if (error.message.includes('Texto muito curto')) {
      errorMessage = error.message;
    } else if (error.message.includes('Texto inv√°lido')) {
      errorMessage = error.message;
    } else {
      errorMessage += error.message;
    }
    
    Logger.log('Enviando erro para popup:', errorMessage);
    
    chrome.runtime.sendMessage({
      action: 'displaySummary',
      summary: errorMessage
    });
  }
}

// Fun√ß√£o para criar ou obter ID do utilizador
async function createOrGetUserId() {
  try {
    // Tentar obter userId existente
    const result = await new Promise((resolve) => {
      chrome.storage.local.get(['userId'], resolve);
    });
    
    if (result.userId) {
      return result.userId;
    }
    
    // Criar novo utilizador no backend
    const response = await fetch(`${API_ENDPOINTS.USERS}/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        deviceId: generateDeviceId()
      })
    });
    
    if (!response.ok) {
      throw new Error('Erro ao criar utilizador');
    }
    
    const userData = await response.json();
    
    // Guardar userId no storage
    chrome.storage.local.set({ userId: userData.userId });
    
    return userData.userId;
    
  } catch (error) {
    console.error('Erro ao criar/utilizar utilizador:', error);
    // Fallback: gerar ID local
    const fallbackId = generateDeviceId();
    chrome.storage.local.set({ userId: fallbackId });
    return fallbackId;
  }
}

// Fun√ß√£o para gerar ID √∫nico do dispositivo
function generateDeviceId() {
  // Gerar ID √∫nico usando caracter√≠sticas dispon√≠veis no Service Worker
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 15);
  const userAgent = navigator.userAgent || 'unknown';
  
  // Criar hash simples baseado em caracter√≠sticas dispon√≠veis
  let hash = '';
  for (let i = 0; i < userAgent.length; i++) {
    hash += userAgent.charCodeAt(i).toString(16);
  }
  
  // Combinar tudo para criar ID √∫nico
  const deviceId = `device_${hash.substring(0, 8)}_${timestamp}_${random}`;
  
  console.log('ID do dispositivo gerado:', deviceId);
  return deviceId;
}

// Fun√ß√£o para usar backend seguro
async function summarizeWithBackend(text, userId, url = '', title = '', language = 'pt') {
  try {
    Logger.log('Usando backend seguro para resumir texto...', {
      url: API_ENDPOINTS.PROXY,
      userId: userId,
      textLength: text.length,
      pageUrl: url,
      pageTitle: title
    });
    
    const response = await fetch(API_ENDPOINTS.PROXY, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: userId,
        text: text,
        apiType: 'shared',
        url: url,
        title: title,
        language: language
      })
    });
    
    Logger.log('Response status:', response.status);
    Logger.log('Response ok:', response.ok);
    
    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
      } catch (e) {
        errorData = { error: `Erro HTTP: ${response.status} ${response.statusText}` };
      }
      Logger.error('Backend error:', errorData);
      throw new Error(errorData.error || `Erro HTTP: ${response.status}`);
    }
    
    const result = await response.json();
    Logger.log('Backend result:', result);
    
    // Atualizar cr√©ditos no storage se dispon√≠vel
    if (result.credits !== undefined) {
      chrome.storage.local.set({ sharedCredits: result.credits });
    }
    
    // Processar ratings se dispon√≠veis
    if (result.ratings) {
      Logger.log('Ratings recebidos:', result.ratings);
      chrome.storage.local.set({ 
        lastRatings: result.ratings,
        lastDocumentType: result.documentType || 'unknown'
      });
    }
    
    return {
      summary: result.summary,
      ratings: result.ratings,
      documentType: result.documentType
    };
    
  } catch (error) {
    Logger.error('Erro no backend:', error);
    throw error;
  }
}

// Cache para modelos dispon√≠veis
let cachedModels = null;
let modelsCacheTime = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutos

// Fun√ß√£o para chamar a API Gemini diretamente (m√©todo antigo)
async function summarizeWithGemini(text, apiKey, language = 'pt') {
  try {
    // Verificar se temos modelos em cache v√°lido
    const now = Date.now();
    if (!cachedModels || (now - modelsCacheTime) > CACHE_DURATION) {
      cachedModels = await listAvailableModels(apiKey);
      modelsCacheTime = now;
    }

    let modelsToTry = [];

    if (cachedModels && cachedModels.models) {
      // Filtrar apenas modelos que suportam generateContent
      modelsToTry = cachedModels.models
        .filter(model => model.supportedGenerationMethods &&
                        model.supportedGenerationMethods.includes('generateContent'))
        .map(model => model.name.replace('models/', ''))
        .slice(0, 3); // Pegar apenas os primeiros 3
    }

    // Fallback para modelos conhecidos se n√£o conseguir listar
    if (modelsToTry.length === 0) {
      modelsToTry = ['gemini-pro', 'gemini-1.5-pro', 'gemini-1.0-pro'];
    }

    console.log('Modelos a tentar:', modelsToTry);

    for (const model of modelsToTry) {
      try {
        console.log(`Tentando modelo: ${model}`);
        const result = await tryModel(model, text, apiKey, language);
        console.log(`Modelo ${model} funcionou!`);
        return result;
      } catch (error) {
        console.warn(`Modelo ${model} falhou:`, error.message);
        if (model === modelsToTry[modelsToTry.length - 1]) {
          throw error; // Se todos os modelos falharam
        }
      }
    }
  } catch (error) {
    console.error('Erro geral na fun√ß√£o summarizeWithGemini:', error);
    throw error;
  }
}

// Fun√ß√£o para tentar um modelo espec√≠fico
async function tryModel(model, text, apiKey, language = 'pt') {
  // Limitar o tamanho do texto para evitar limites da API
  const maxLength = 100000; // Ajustar conforme necess√°rio
  const textToSummarize = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;

  // Prompts por idioma
  const prompts = {
    pt: `Voc√™ √© um especialista em direito do consumidor e privacidade de dados. Sua tarefa √© analisar o texto legal fornecido (Termos de Servi√ßo ou Pol√≠tica de Privacidade) e transform√°-lo em informa√ß√µes claras, acion√°veis e estritamente formatadas em JSON para um utilizador comum.

A √öNICA sa√≠da permitida deve ser um objeto JSON puro. N√ÉO use blocos de c√≥digo Markdown. N√ÉO inclua qualquer texto introdut√≥rio, explicativo ou conclusivo. A resposta deve ser APENAS o JSON em portugu√™s (Portugal) seguindo esta estrutura EXATA:

{
  "resumo_conciso": "Um resumo r√°pido e geral do que o utilizador est√° a aceitar. Use no m√°ximo dois par√°grafos.",
  "pontos_chave": [
    "Use um ponto para descrever os aspetos mais importantes do servi√ßo.",
    "Use outro ponto para descrever os direitos e responsabilidades cruciais do utilizador.",
    "Crie um total de 5 a 7 pontos essenciais sobre como o servi√ßo funciona, a que se compromete, ou o que √© fundamental saber."
  ],
  "alertas_privacidade": [
    {
      "tipo": "partilha_dados",
      "texto": "Os seus dados podem ser partilhados com terceiros (ex: anunciantes) para fins de marketing ou monetiza√ß√£o."
    },
    {
      "tipo": "propriedade_conteudo",
      "texto": "Cl√°usulas que permitem √† empresa usar, modificar ou sublicenciar o seu conte√∫do (fotos, posts) sem restri√ß√µes ou compensa√ß√£o."
    },
    {
      "tipo": "alteracoes_termos",
      "texto": "A empresa reserva-se o direito de alterar unilateralmente os termos ou a pol√≠tica sem aviso pr√©vio ou notifica√ß√£o ativa ao utilizador."
    },
    {
      "tipo": "jurisdicao",
      "texto": "Existem cl√°usulas que for√ßam a arbitragem ou limitam a jurisdi√ß√£o do tribunal, dificultando a√ß√µes judiciais diretas contra a empresa."
    }
  ]
}

Valores V√°lidos para o Campo tipo (Use um destes para cada objeto de alerta):
- partilha_dados
- propriedade_conteudo
- alteracoes_termos
- jurisdicao
- outros_riscos
- sem_alertas (Apenas use este valor se n√£o for encontrado nenhum dos riscos acima. Se este for usado, ele deve ser o √∫nico objeto na lista alertas_privacidade.)

Mantenha a linguagem dos valores dentro do JSON direta, acess√≠vel e objetiva. Evite jarg√£o jur√≠dico sempre que poss√≠vel.`,

    en: `You are an expert in consumer law and data privacy. Your task is to analyze the provided legal text (Terms of Service or Privacy Policy) and transform it into clear, actionable information strictly formatted in JSON for a common user.

The ONLY allowed output should be a pure JSON object. DO NOT use Markdown code blocks. DO NOT include any introductory, explanatory or concluding text. The response should be ONLY the JSON in English following this EXACT structure:

{
  "resumo_conciso": "A quick and general summary of what the user is accepting. Use at most two paragraphs.",
  "pontos_chave": [
    "Use one point to describe the most important aspects of the service.",
    "Use another point to describe the crucial rights and responsibilities of the user.",
    "Create a total of 5 to 7 essential points about how the service works, what it commits to, or what is fundamental to know."
  ],
  "alertas_privacidade": [
    {
      "tipo": "partilha_dados",
      "texto": "Your data may be shared with third parties (e.g. advertisers) for marketing or monetization purposes."
    },
    {
      "tipo": "propriedade_conteudo",
      "texto": "Clauses that allow the company to use, modify or sublicense your content (photos, posts) without restrictions or compensation."
    },
    {
      "tipo": "alteracoes_termos",
      "texto": "The company reserves the right to unilaterally change terms or policy without prior notice or active notification to the user."
    },
    {
      "tipo": "jurisdicao",
      "texto": "There are clauses that force arbitration or limit court jurisdiction, making direct legal action against the company difficult."
    }
  ]
}

Valid Values for the tipo field (Use one of these for each alert object):
- partilha_dados
- propriedade_conteudo
- alteracoes_termos
- jurisdicao
- outros_riscos
- sem_alertas (Only use this value if none of the above risks are found. If this is used, it should be the only object in the alertas_privacidade list.)

Keep the language within the JSON values direct, accessible and objective. Avoid legal jargon whenever possible.`,

    es: `Eres un experto en derecho del consumidor y privacidad de datos. Tu tarea es analizar el texto legal proporcionado (T√©rminos de Servicio o Pol√≠tica de Privacidad) y transformarlo en informaci√≥n clara, accionable y estrictamente formateada en JSON para un usuario com√∫n.

La √öNICA salida permitida debe ser un objeto JSON puro. NO uses bloques de c√≥digo Markdown. NO incluyas ning√∫n texto introductorio, explicativo o concluyente. La respuesta debe ser SOLO el JSON en espa√±ol siguiendo esta estructura EXACTA:

{
  "resumo_conciso": "Un resumen r√°pido y general de lo que el usuario est√° aceptando. Usa como m√°ximo dos p√°rrafos.",
  "pontos_chave": [
    "Usa un punto para describir los aspectos m√°s importantes del servicio.",
    "Usa otro punto para describir los derechos y responsabilidades cruciales del usuario.",
    "Crea un total de 5 a 7 puntos esenciales sobre c√≥mo funciona el servicio, a qu√© se compromete, o qu√© es fundamental saber."
  ],
  "alertas_privacidade": [
    {
      "tipo": "partilha_dados",
      "texto": "Tus datos pueden ser compartidos con terceros (ej: anunciantes) para fines de marketing o monetizaci√≥n."
    },
    {
      "tipo": "propriedade_conteudo",
      "texto": "Cl√°usulas que permiten a la empresa usar, modificar o sublicenciar tu contenido (fotos, posts) sin restricciones o compensaci√≥n."
    },
    {
      "tipo": "alteracoes_termos",
      "texto": "La empresa se reserva el derecho de cambiar unilateralmente los t√©rminos o la pol√≠tica sin aviso previo o notificaci√≥n activa al usuario."
    },
    {
      "tipo": "jurisdicao",
      "texto": "Existen cl√°usulas que fuerzan el arbitraje o limitan la jurisdicci√≥n del tribunal, dificultando las acciones legales directas contra la empresa."
    }
  ]
}

Valores V√°lidos para el Campo tipo (Usa uno de estos para cada objeto de alerta):
- partilha_dados
- propriedade_conteudo
- alteracoes_termos
- jurisdicao
- outros_riscos
- sem_alertas (Solo usa este valor si no se encuentra ninguno de los riesgos anteriores. Si se usa, debe ser el √∫nico objeto en la lista alertas_privacidade.)

Mant√©n el lenguaje de los valores dentro del JSON directo, accesible y objetivo. Evita la jerga legal siempre que sea posible.`,

    fr: `Vous √™tes un expert en droit de la consommation et en confidentialit√© des donn√©es. Votre t√¢che est d'analyser le texte juridique fourni (Conditions de Service ou Politique de Confidentialit√©) et de le transformer en informations claires, exploitables et strictement format√©es en JSON pour un utilisateur commun.

La SEULE sortie autoris√©e doit √™tre un objet JSON pur. N'utilisez PAS de blocs de code Markdown. N'incluez AUCUN texte introductif, explicatif ou conclusif. La r√©ponse doit √™tre SEULEMENT le JSON en fran√ßais suivant cette structure EXACTE:

{
  "resumo_conciso": "Un r√©sum√© rapide et g√©n√©ral de ce que l'utilisateur accepte. Utilisez au maximum deux paragraphes.",
  "pontos_chave": [
    "Utilisez un point pour d√©crire les aspects les plus importants du service.",
    "Utilisez un autre point pour d√©crire les droits et responsabilit√©s cruciaux de l'utilisateur.",
    "Cr√©ez un total de 5 √† 7 points essentiels sur le fonctionnement du service, √† quoi il s'engage, ou ce qu'il est fondamental de savoir."
  ],
  "alertas_privacidade": [
    {
      "tipo": "partilha_dados",
      "texto": "Vos donn√©es peuvent √™tre partag√©es avec des tiers (ex: annonceurs) √† des fins de marketing ou de mon√©tisation."
    },
    {
      "tipo": "propriedade_conteudo",
      "texto": "Clauses qui permettent √† l'entreprise d'utiliser, modifier ou sous-licencier votre contenu (photos, posts) sans restrictions ou compensation."
    },
    {
      "tipo": "alteracoes_termos",
      "texto": "L'entreprise se r√©serve le droit de modifier unilat√©ralement les termes ou la politique sans pr√©avis ou notification active √† l'utilisateur."
    },
    {
      "tipo": "jurisdicao",
      "texto": "Il existe des clauses qui forcent l'arbitrage ou limitent la juridiction du tribunal, rendant difficile les actions l√©gales directes contre l'entreprise."
    }
  ]
}

Valeurs Valides pour le Champ tipo (Utilisez l'une de ces valeurs pour chaque objet d'alerte):
- partilha_dados
- propriedade_conteudo
- alteracoes_termos
- jurisdicao
- outros_riscos
- sem_alertas (Utilisez cette valeur seulement si aucun des risques ci-dessus n'est trouv√©. Si cette valeur est utilis√©e, elle doit √™tre le seul objet dans la liste alertas_privacidade.)

Gardez le langage des valeurs dans le JSON direct, accessible et objectif. √âvitez le jargon juridique autant que possible.`
  };

  const prompt = prompts[language] + `

---

Texto Legal a ser Analisado:

${textToSummarize}`;

  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`;
  console.log('Fazendo chamada para:', `${apiUrl}?key=${apiKey.substring(0, 10)}...`);

  const response = await fetch(`${apiUrl}?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      })
    });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('Erro da API Gemini:', response.status, response.statusText, errorText);
    throw new Error(`Erro da API Gemini: ${response.status} ${response.statusText} - ${errorText}`);
  }

  const data = await response.json();

  if (data.candidates && data.candidates[0] && data.candidates[0].content) {
    let responseText = data.candidates[0].content.parts[0].text;

    // Limpar blocos de c√≥digo Markdown se presentes
    responseText = cleanMarkdownCodeBlocks(responseText);

    console.log('Resposta limpa da API:', responseText.substring(0, 200) + '...');
    return responseText;
  } else {
    throw new Error('Resposta inv√°lida da API Gemini');
  }
}

// Fun√ß√£o para limpar blocos de c√≥digo Markdown da resposta da API
function cleanMarkdownCodeBlocks(text) {
  // Remover blocos de c√≥digo Markdown (```json ... ```)
  let cleanedText = text
    .replace(/^```json\s*/gm, '')  // Remover in√≠cio do bloco
    .replace(/^```\s*/gm, '')       // Remover fim do bloco
    .replace(/\s*```$/gm, '')       // Remover fim do bloco no final da linha
    .trim();

  // Tamb√©m remover poss√≠veis varia√ß√µes
  cleanedText = cleanedText
    .replace(/^```\s*json\s*/gm, '')
    .replace(/^```\s*/gm, '')
    .replace(/\s*```\s*$/gm, '')
    .trim();

  console.log('Texto antes da limpeza:', text.substring(0, 100) + '...');
  console.log('Texto ap√≥s limpeza:', cleanedText.substring(0, 100) + '...');

  return cleanedText;
}

// Fun√ß√£o para listar modelos dispon√≠veis (para debug)
async function listAvailableModels(apiKey) {
  try {
    console.log('Listando modelos dispon√≠veis...');
    const response = await fetch(`${GEMINI_MODELS_URL}?key=${apiKey}`);

    if (!response.ok) {
      console.error('Erro ao listar modelos:', response.status, response.statusText);
      return null;
    }

    const data = await response.json();
    console.log('Modelos dispon√≠veis:', data);

    if (data.models) {
      const generateContentModels = data.models.filter(model =>
        model.supportedGenerationMethods &&
        model.supportedGenerationMethods.includes('generateContent')
      );
      console.log('Modelos que suportam generateContent:', generateContentModels.map(m => m.name));
    }

    return data;
  } catch (error) {
    console.error('Erro ao listar modelos:', error);
    return null;
  }
}

// Listener para quando a extens√£o √© instalada
chrome.runtime.onInstalled.addListener((details) => {
  console.log('ToS & Privacy Summarizer instalado com sucesso');
  
  // Verificar se √© uma nova instala√ß√£o
  if (details.reason === 'install') {
    console.log('Nova instala√ß√£o detectada - mostrar onboarding');
    
    // Abrir p√°gina de onboarding para novas instala√ß√µes
    chrome.tabs.create({
      url: chrome.runtime.getURL('onboarding.html')
    });
  }
  
  // Definir configura√ß√µes padr√£o
  chrome.storage.local.get(['geminiApiKey', 'autoDetect', 'notifications', 'apiType'], function(result) {
    const defaults = {
      autoDetect: result.autoDetect !== false, // Default: true
      notifications: result.notifications !== false, // Default: true
      apiType: result.apiType || 'shared' // Default: usar API compartilhada
    };
    
    chrome.storage.local.set(defaults, function() {
      console.log('Configura√ß√µes padr√£o definidas:', defaults);
    });
  });
});